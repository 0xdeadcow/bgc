#!/usr/bin/env python3

"""
Concatenates a number of input files into a single output file, while
performing the following regex substitutions:

[[pagebreak]]

[nobr[s]]   # Substitute spaces with `\ ` to mark as nonbreaking
            # Doesn't work inside code markdown, alas

[nh[x]] \hyphenation{x}   # no hyphen, no underscores allowed
[ix[x]] \index{x}         # index straight up
[ixtt[x]] \index{x@\texttt{x}}         # index tt

fl = footnote link
flx = footnote link to example https://beej.us/guide/bgnet/examples/file
flr = footnote link to redirect https://beej.us/guide/url/id

[fl[link|url]] [link](url)^[url]
[flw[link|url]] [link](https://en.wikipedia.org/wiki/url)^[https://en.wikipedia.org/wiki/url]
[flx[link|file]] [link](https://beej.us/guide/bgnet/examples/file)^[https://beej.us/guide/bgnet/examples/file]
[flr[link|id]] [link](https://beej.us/guide/url/id)^[https://beej.us/guide/url/id]
[flrfc[link|num]] [link](https://tools.ietf.org/html/rfcnum)^[https://tools.ietf.org/html/rfcnum]


[i[entry]]
[i[entry]flags]
[i[entry|replacement]flags]

flags for page number: i: italic, b: bold, or a combination.
flags for replacement: T: typewriter, I: italic, B: bold, or a combination.

Backticks can delimit typewriter text:

[i[`\n` newline]]

entry can have a bang path: "entry!subentry"

Also puts a blank line between files.

"""

import sys
import re
import preproc_config

def get_config(k, default=None):
	return getattr(preproc_config, k, default)

if len(sys.argv) < 3:
    print("usage: preproc infile [infile ... ] outputfile", file=sys.stdout)
    sys.exit(1)

infiles = sys.argv[1:-1]
outfile = sys.argv[-1]

filedata = []

def nobr_replace(mo):
    return re.sub(r'\s', r'\ ', mo.group(1))

for infile in infiles:
    fin = open(infile)
    filedata.append(fin.read())
    filedata.append("\n")  # Put a blank in there in case there's no trailing newline
    fin.close()

wp_path = get_config("WIKIPEDIA_URL", "https://en.wikipedia.org/wiki/")
man_path = get_config("MAN_URL", "https://man.archlinux.org/man/core/man-pages/")

try:
	wp_path = preproc_config.WIKIPEDIA_URL
except AttributeError:
	wp_path = "https://en.wikipedia.org/wiki/"

filedata = '\n'.join(filedata)

def i_replace(m):

	#print(f">>>> {m.groups()}")

	def escape(s):
		s = re.sub(r'\\', r'{\\backslash}', s)
		s = re.sub(r'([&_#%])', r'\\\1', s)
		s = re.sub(r'([!@])', r'"\1', s)
		s = re.sub(r'\|', r'\\textbar{}', s)

		return s

	def code_replace(s):
		""" Replace ` code delimiters """
		result = ""
		opener = True

		for c in s:
			if c == '`':
				if opener:
					result += '\\texttt{'
				else:
					result += '}'
				opener = not opener
			else:
				result += c

		return result

	"""Index [i[]] tag replacer."""
	entry = m.group('entry')
	flags = m.group('flags')
	repl = m.group('repl')

	flags = flags if flags is not None else ''
	repl = repl if repl is not None else ''

	entry = escape(entry)
	repl = escape(repl)

	if repl == '' and ('T' in flags or 'I' in flags or 'B' in flags or '`' in entry):
		repl = entry

	entry = re.sub(r'`', '', entry)
	repl = code_replace(repl)

	if 'b' in flags:
		entry += '|textbf'
	if 'i' in flags:
		entry += '|textit'

	if repl != '':
		if 'T' in flags:
			repl = '\\texttt{' + repl + '}'
		if 'I' in flags:
			repl = '\\textsl{' + repl + '}'
		if 'B' in flags:
			repl = '\\textbf{' + repl + '}'

		repl = '@' + repl

	return '\\index{' + entry + repl + '}'

filedata = re.sub(r'\t', "    ", filedata, flags=re.DOTALL)
filedata = re.sub(r'\[nobr\[(.+?)\]\]', nobr_replace, filedata, flags=re.DOTALL)
filedata = re.sub(r'\[\[pagebreak\]\]', r'\\newpage', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[\[manbreak\]\]', r'***', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[nh\[(.+?)\]\]', r'\\hyphenation{\1}', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[ix\[(.+?)\]\]', r'\\index{\1}', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[ixtt\[(.+?)\]\]', r'\\index{\1@\\texttt{\1}}', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[fl\[(.+?)\|(.+?)\]\]', r'[\1](\2)^[\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[flw\[(.+?)\|(.+?)\]\]', r'[\1](' + wp_path + r'\2)^[' + wp_path + r'\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[flm\[(.+?)\|(.+?)\]\]', r'[\1](' + man_path + r'\2)^[' + man_path + r'\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[flx\[(.+?)\|(.+?)\]\]', r'[\1](' + preproc_config.EXAMPLE_URL + r'\2)^[' + preproc_config.EXAMPLE_URL + r'\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[fls\[(.+?)\|(.+?)\]\]', r'[\1](' + preproc_config.EXERCISE_URL + r'\2)^[' + preproc_config.EXERCISE_URL + r'\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[flsol\[(.+?)\]\]', r'([Solution.](' + preproc_config.EXERCISE_URL + r'\1)^[' + preproc_config.EXERCISE_URL + r'\1])', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[flr\[(.+?)\|(.+?)\]\]', r'[\1](https://beej.us/guide/url/\2)^[https://beej.us/guide/url/\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[flrfc\[(.+?)\|(.+?)\]\]', r'[\1](https://tools.ietf.org/html/rfc\2)^[https://tools.ietf.org/html/rfc\2]', filedata, flags=re.DOTALL)
filedata = re.sub(r'\[i\[(?P<entry>.+?)(?:@(?P<repl>.+?))?\](?P<flags>.*?)\]', i_replace, filedata, flags=re.DOTALL)

fout = open(outfile, "w")
in_fence = False
this_line_fence = False
number_lines = False

# Go through a line at a time indenting if we're in unnumbered fenced code
for line in filedata.splitlines(True):
	if line.strip()[:3] == '```':
		number_lines = line.lower().find("numberlines") != -1
		this_line_fence = True
		in_fence = not in_fence
	else:
		this_line_fence = False

	#if in_fence and not this_line_fence and not number_lines:
	#	fout.write("    ")   # indent

	fout.write(line)

fout.close()

